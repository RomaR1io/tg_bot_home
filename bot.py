import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from mqtt import publish
from functools import wraps
import os
import subprocess
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token="7564675362:AAHrVXjlLHJUI9_AzH9VG3oHqoV3kc5Z7kY")
dp = Dispatcher()
ALLOWED_USERS = {566737402}

def auth(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"""
    @wraps(func)
    async def wrapper(message: types.Message | types.CallbackQuery, *args, **kwargs):
        user_id = message.from_user.id
        if user_id not in ALLOWED_USERS:
            if isinstance(message, types.Message):
                await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            elif isinstance(message, types.CallbackQuery):
                await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
            return
        return await func(message, *args, **kwargs)
    return wrapper


def is_pc_on(ip_address: str) -> bool:
    try:
        # –ü–∏–Ω–≥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        subprocess.check_output(["ping", "-n", "1", ip_address], timeout=2)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ARP-—Ç–∞–±–ª–∏—Ü—ã (—Ç–æ–ª—å–∫–æ Windows)
        arp_output = subprocess.check_output(["arp", "-a", ip_address]).decode()
        return "00-00-00-00-00-00" not in arp_output  # –ï—Å–ª–∏ MAC –Ω–µ –Ω—É–ª–µ–≤–æ–π
    except:
        return False



# –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
@auth
async def cmd_start(msg: types.Message):
    kb = [
        [types.KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö"),
         types.KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    await msg.answer(
        "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–º—É",
        reply_markup=keyboard
    )

@dp.message(F.text.lower() == "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∫")
@auth
async def menu_pc(message: types.Message):
    if is_pc_on("192.168.0.46"):
        status="–í–∫–ª—é—á–µ–Ω"
    else: status="–í—ã–∫–ª—é—á–µ–Ω"
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –ü–ö",))
    await message.answer(f"–°—Ç–∞—Ç—É—Å –ü–ö {status} \n–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö!")


@dp.message(F.text.lower() == "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ")
@auth
async def menu_room(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data="room_temp"),
        types.InlineKeyboardButton(text="üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", callback_data="room_hum")
    )
    builder.row(
        types.InlineKeyboardButton(text="üí° –í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç —É –ê–ª–∏—Å—ã", callback_data="light_on_a"),
        types.InlineKeyboardButton(text="üîå –í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç —É –ê–ª–∏—Å—ã", callback_data="light_off_a")
    )
    builder.row(
        types.InlineKeyboardButton(text="üí° –í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ", callback_data="light_on_me"),
        types.InlineKeyboardButton(text="üîå –í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ", callback_data="light_off_me")
    )
    await message.answer(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "room_temp")
@auth
async def send_temp(callback: types.CallbackQuery):
    from mqtt import current_temperature
    await callback.message.answer(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_temperature}¬∞C")
    await callback.answer()

@dp.callback_query(F.data == "room_hum")
@auth
async def send_hum(callback: types.CallbackQuery):
    from mqtt import current_humidity
    await callback.message.answer(f"–¢–µ–∫—É—â–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {current_humidity}%")
    await callback.answer()

@dp.callback_query(F.data == "light_on_a")
@auth
async def turn_light_on(callback: types.CallbackQuery):
    publish("room/light", "ON_a")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ MQTT
    await callback.message.answer("‚úÖ –°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω")
    await callback.answer()

@dp.callback_query(F.data == "light_off_a")
@auth
async def turn_light_off(callback: types.CallbackQuery):
    publish("room/light", "OFF_a")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ MQTT
    await callback.message.answer("üîå –°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
    await callback.answer()

@dp.callback_query(F.data == "light_on_me")
@auth
async def turn_light_on(callback: types.CallbackQuery):
    publish("room/light", "ON_me")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ MQTT
    await callback.message.answer("‚úÖ –°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω")
    await callback.answer()

@dp.callback_query(F.data == "light_off_me")
@auth
async def turn_light_off(callback: types.CallbackQuery):
    publish("room/light", "OFF_me")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ MQTT
    await callback.message.answer("üîå –°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
    await callback.answer()